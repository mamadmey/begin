> YUM    (/usr/local/lib/python2.7/site-packages/ansible/modules/packaging/os/yum.py)

        Installs, upgrade, downgrades, removes, and lists packages and groups with the `yum' package
        manager.

OPTIONS (= is mandatory):

- allow_downgrade
        Specify if the named package and version is allowed to downgrade a maybe already installed higher
        version of that package. Note that setting allow_downgrade=True can make this module behave in a
        non-idempotent way. The task could end up with a set of packages that does not match the complete
        list of specified packages to install (because dependencies between the downgraded package and
        others can cause changes to the packages which were in the earlier transaction).
        (Choices: yes, no)[Default: no]
        version_added: 2.4

- conf_file
        The remote yum configuration file to use for the transaction.
        [Default: None]
        version_added: 0.6

- disable_gpg_check
        Whether to disable the GPG checking of signatures of packages being installed. Has an effect only
        if state is `present' or `latest'.
        (Choices: yes, no)[Default: no]
        version_added: 1.2

- disablerepo
        `Repoid' of repositories to disable for the install/update operation. These repos will not persist
        beyond the transaction. When specifying multiple repos, separate them with a ",".
        [Default: None]
        version_added: 0.9

- enablerepo
        `Repoid' of repositories to enable for the install/update operation. These repos will not persist
        beyond the transaction. When specifying multiple repos, separate them with a ",".
        [Default: None]
        version_added: 0.9

- exclude
        Package name(s) to exclude when state=present, or latest
        [Default: None]
        version_added: 2.0

- installroot
        Specifies an alternative installroot, relative to which all packages will be installed.
        [Default: /]
        version_added: 2.3

- list
        Package name to run the equivalent of yum list <package> against.
        [Default: None]

= name
        Package name, or package specifier with version, like `name-1.0'. If a previous version is
        specified, the task also needs to turn `allow_downgrade' on. See the `allow_downgrade'
        documentation for caveats with downgrading packages. When using state=latest, this can be '*' which
        means run `yum -y update'.  You can also pass a url or a local path to a rpm file (using
        state=present). To operate on several packages this can accept a comma separated list of packages
        or (as of 2.0) a list of packages.
        (Aliases: pkg)[Default: None]

- security
        If set to `yes', and `state=latest' then only installs updates that have been marked security
        related.
        (Choices: yes, no)[Default: no]
        version_added: 2.4

- skip_broken
        Resolve depsolve problems by removing packages that are causing problems from the trans‚Äê action.
        (Choices: yes, no)[Default: no]
        version_added: 2.3

- state
        Whether to install (`present' or `installed', `latest'), or remove (`absent' or `removed') a
        package.
        (Choices: present, installed, latest, absent, removed)[Default: present]

- update_cache
        Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is
        `present' or `latest'.
        (Aliases: expire-cache)(Choices: yes, no)[Default: no]
        version_added: 1.9

- validate_certs
        This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to
        `no', the SSL certificates will not be validated.
        This should only set to `no' used on personally controlled sites using self-signed certificates as
        it avoids verifying the source site.
        Prior to 2.1 the code worked as if this was set to `yes'.
        (Choices: yes, no)[Default: yes]
        version_added: 2.1


NOTES:
      * When used with a loop of package names in a playbook, ansible optimizes the call to the yum
        module.  Instead of calling the module with a single package each time through the loop,
        ansible calls the module once with all of the package names from the loop.
      * In versions prior to 1.9.2 this module installed and removed each package given to the yum
        module separately. This caused problems when packages specified by filename or url had to be
        installed or removed together. In 1.9.2 this was fixed so that packages are installed in one
        yum transaction. However, if one of the packages adds a new yum repository that the other
        packages come from (such as epel-release) then that package needs to be installed in a
        separate task. This mimics yum's command line behaviour.
      * Yum itself has two types of groups.  "Package groups" are specified in the rpm itself while
        "environment groups" are specified in a separate file (usually by the distribution).
        Unfortunately, this division becomes apparent to ansible users because ansible needs to
        operate on the group of packages in a single transaction and yum requires groups to be
        specified in different ways when used in that way.  Package groups are specified as
        "@development-tools" and environment groups are "@^gnome-desktop-environment". Use the "yum
        group list" command to see which category of group the group you want to install falls into.

REQUIREMENTS:  yum

AUTHOR: Ansible Core Team, Seth Vidal, Eduard Snesarev (github.com/verm666), Berend De Schouwer (github.com/berenddeschouwer), Abhijeet Kasurde (github.com/akasurde)
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:
- name: install the latest version of Apache
  yum:
    name: httpd
    state: latest

- name: remove the Apache package
  yum:
    name: httpd
    state: absent

- name: install the latest version of Apache from the testing repo
  yum:
    name: httpd
    enablerepo: testing
    state: present

- name: install one specific version of Apache
  yum:
    name: httpd-2.2.29-1.4.amzn1
    state: present

- name: upgrade all packages
  yum:
    name: '*'
    state: latest

- name: upgrade all packages, excluding kernel & foo related packages
  yum:
    name: '*'
    state: latest
    exclude: kernel*,foo*

- name: install the nginx rpm from a remote repo
  yum:
    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
    state: present

- name: install nginx rpm from a local file
  yum:
    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm
    state: present

- name: install the 'Development tools' package group
  yum:
    name: "@Development tools"
    state: present

- name: install the 'Gnome desktop' environment group
  yum:
    name: "@^gnome-desktop-environment"
    state: present

- name: List ansible packages and register result to print with debug later.
  yum:
    list: ansible
  register: result

